plugins {
    id 'java-library'

    id 'maven-publish'
    id 'jacoco'
    id "com.github.spotbugs" version "latest.release"
    id "com.diffplug.spotless" version "latest.release"
    id 'pmd'
    id 'checkstyle'

    id 'org.hidetake.ssh' version "latest.release"
    id "se.bjurr.gitchangelog.git-changelog-gradle-plugin" version "latest.release"
}

group = 'com.manticore'

def getVersion = { boolean considerSnapshot ->
    def major = 0
    def minor = 0
    def patch = 0
    def commit = ""
    def snapshot =""
    new ByteArrayOutputStream().withStream { os ->
        exec {
            workingDir "$projectDir"
            args = [
                    "--no-pager"
                    , "describe"
                    , "--tags"
                    , "--always"
                    , "--dirty=-SNAPSHOT"
            ]
            executable "git"
            standardOutput = os
        }
        def matcher = os.toString() =~ /(\d*)\.(\d*)-(\d*)-([a-zA-Z\d]*)/
        matcher.find()

        major = matcher[0][1]
        minor = matcher[0][2]
        patch = matcher[0][3]
        commit = matcher[0][4]

        if (considerSnapshot) {
            minor++
            snapshot =  "-SNAPSHOT"
        }
    }
    return "${major}.${minor}${snapshot}"
}
version = getVersion(true)

description = 'JSQLParser library'
java.sourceCompatibility = JavaVersion.VERSION_1_8

repositories {
    gradlePluginPortal()
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.+'

    implementation 'org.apache.parquet:parquet-common:+'
    implementation 'org.apache.parquet:parquet-encoding:+'
    implementation 'org.apache.parquet:parquet-column:+'
    implementation 'org.apache.parquet:parquet-hadoop:+'
    implementation 'org.apache.hadoop:hadoop-common:+'
    implementation 'org.apache.hadoop:hadoop-mapreduce-client-core:+'
    implementation 'org.lz4:lz4-java:+'
}

javadoc {
    options.addBooleanOption('html5', true)
    options.addBooleanOption("Xdoclint:none", true)
}

test {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    finalizedBy check
}


spotbugsMain {
    reports {
        html {
            enabled = true
            destination = file("build/reports/spotbugs/main/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

spotbugs {
    excludeFilter = file("config/spotbugs/spotBugsExcludeFilter.xml")
}

pmd {
    consoleOutput = false
    sourceSets = [sourceSets.main]

    // clear the ruleset in order to use configured rules only
    ruleSets = []

    rulesMinimumPriority = 1
    ruleSetFiles = files("config/pmd/ruleset.xml")
}

checkstyle {
    toolVersion "9.2"
    sourceSets = [sourceSets.main, sourceSets.test]
    configFile =rootProject.file('config/checkstyle/checkstyle.xml')

    reports {
        xml.required = false
        html.required = true
    }
}

spotless {
    // optional: limit format enforcement to just the files changed by this feature branch
    ratchetFrom 'origin/master'

    format 'misc', {
        // define the files to apply `misc` to
        target '*.rst', '*.md', '.gitignore'

        // define the steps to apply to those files
        trimTrailingWhitespace()
        indentWithSpaces(4) // or spaces. Takes an integer argument if you don't like 4
        endWithNewline()
    }
    java {
        indentWithSpaces(4)
        eclipse().configFile('config/formatter/eclipse-java-google-style.xml')
    }
}
